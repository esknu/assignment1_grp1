@misc{2023,
  title = {Using {{RStudio Projects}}},
  year = {2023},
  month = aug,
  journal = {Posit Support},
  urldate = {2023-09-11},
  abstract = {Using Projects RStudio projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and source documents. Creating Project...},
  howpublished = {https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects},
  langid = {american}
}

@article{boettiger2015,
  title = {An Introduction to {{Docker}} for Reproducible Research},
  author = {Boettiger, Carl},
  year = {2015},
  month = jan,
  journal = {ACM SIGOPS Operating Systems Review},
  volume = {49},
  number = {1},
  pages = {71--79},
  issn = {0163-5980},
  urldate = {2023-09-11},
  abstract = {As computational work becomes more and more integral to many aspects of scientific research, computational reproducibility has become an issue of increasing importance to computer systems researchers and domain scientists alike. Though computational reproducibility seems more straight forward than replicating physical experiments, the complex and rapidly changing nature of computer environments makes being able to reproduce and extend such work a serious challenge. In this paper, I explore common reasons that code developed for one research project cannot be successfully executed or extended by subsequent researchers. I review current approaches to these issues, including virtual machines and workflow systems, and their limitations. I then examine how the popular emerging technology Docker combines several areas from systems research - such as operating system virtualization, cross-platform portability, modular re-usable elements, versioning, and a 'DevOps' philosophy, to address these challenges. I illustrate this with several examples of Docker use with a focus on the R statistical environment.}
}

@article{holmes2021,
  title = {Reproducible Manuscript Preparation with {{RMarkdown}} Application to {{JMSACL}} and Other {{Elsevier Journals}}},
  author = {Holmes, Daniel T. and Mobini, Mahdi and McCudden, Christopher R.},
  year = {2021},
  month = nov,
  journal = {Journal of Mass Spectrometry and Advances in the Clinical Lab},
  volume = {22},
  pages = {8--16},
  issn = {2667-145X},
  urldate = {2023-09-11},
  abstract = {Introduction With the rising complexity of modern multimarker analytical techniques and notable scientific publication retractions required for erroneous statistical analysis, there is increasing awareness of the importance of research transparency and reproducibility. The development of mature open-source tools for literate programming in multiple langauge paradigms has made fully-reproducible authorship possible. Objectives We describe the procedure for manuscript preparation using RMarkdown and the R statistical programming language with application to JMSACL or any other Elsevier journal. Methods An instructional manuscript has been prepared in the RMarkdown markup language with stepwise directions on preparing sections, subsections, lists, tables, figures and reference management in an entirely reproducible format. Results From RMarkdown code, a submission-ready PDF is generated and JMSACL-compatible LaTeX code is generated. These can be uploaded to the Editorial Manager. Conclusion A completely reproducible manuscript preparation pipeline using the R and RMarkdown is described.},
  keywords = {Data science,Executable document,LaTeX,Literate programming,Markdown,R language,Reproducible research,RMarkdown}
}

@inproceedings{joy2015,
  title = {Performance Comparison between {{Linux}} Containers and Virtual Machines},
  booktitle = {2015 {{International Conference}} on {{Advances}} in {{Computer Engineering}} and {{Applications}}},
  author = {Joy, Ann Mary},
  year = {2015},
  month = mar,
  pages = {342--346},
  abstract = {With the advent of cloud computing and virtualization, modern distributed applications run on virtualized environments for hardware resource utilization and flexibility of operations in an infrastructure. However, when it comes to virtualization, resource overhead is involved. Linux containers can be an alternative to traditional virtualization technologies because of its high resource utilization and less overhead. This paper provides a comparison between Linux containers and virtual machines in terms of performance and scalability.},
  keywords = {cloud computing,containers,Containers,docker,hypervisor,kubernetes,Linux,Scalability,Servers,Virtual machine monitors,Virtual machining,virtualization,Virtualization}
}

@book{turnbull2014,
  title = {The {{Docker Book}}: {{Containerization Is}} the {{New Virtualization}}},
  shorttitle = {The {{Docker Book}}},
  author = {Turnbull, James},
  year = {2014},
  month = jul,
  publisher = {{James Turnbull}},
  abstract = {Updated for Docker Community Edition v18.09!Docker book designed for SysAdmins, SREs, Operations staff, Developers and DevOps who are interested in deploying the open source container service Docker.~In this book, we\&\#39;ll walk you through installing, deploying, managing, and extending Docker. We\&\#39;re going to do that by first introducing you to the basics of Docker and its components. Then we\&\#39;ll start to use Docker to build containers and services to perform a variety of tasks.~We\&\#39;re going to take you through the development lifecycle, from testing to production, and see where Docker fits in and how it can make your life easier. We\&\#39;ll make use of Docker to build test environments for new projects, demonstrate how to integrate Docker with continuous integration workflow, and then how to build application services and platforms. Finally, we\&\#39;ll show you how to use Docker\&\#39;s API and how to extend Docker yourself.~We\&\#39;ll teach you how to:~* Install Docker.~* Take your first steps with a Docker container.~* Build Docker images.~* Manage and share Docker images.~* Run and manage more complex Docker containers.~* Deploy Docker containers as part of your testing pipeline.~* Build multi-container applications and environments. * Learn about orchestration using Compose and Swarm for the orchestration of Docker containers and Consul for service discovery.* Explore the Docker API. * Getting Help and Extending Docker.},
  googlebooks = {4xQKBAAAQBAJ},
  isbn = {978-0-9888202-0-3},
  langid = {english},
  keywords = {Computers / General,Technology \& Engineering / General}
}
