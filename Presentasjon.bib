@article{basharirad2017a,
  title = {An {{Introduction}} to {{Docker}} and {{Analysis}} of Its {{Performance}}},
  author = {Bashari Rad, Babak and Bhatti, Harrison and Ahmadi, Mohammad},
  year = {2017},
  month = mar,
  journal = {IJCSNS International Journal of Computer Science and Network Security},
  volume = {173},
  pages = {8},
  abstract = {Docker provide some facilities, which are useful for developers and administrators. It is an open platform can be used for building, distributing, and running applications in a portable, lightweight runtime and packaging tool, known as Docker Engine. It also provide Docker Hub, which is a cloud service for sharing applications. Costs can be reduced by replacing traditional virtual machine with docker container. It excellently reduces the cost of rebuilding the cloud development platform.}
}

@article{peikert2021,
  title = {A {{Reproducible Data Analysis Workflow With R Markdown}}, {{Git}}, {{Make}}, and {{Docker}}},
  author = {Peikert, Aaron and Brandmaier, Andreas M.},
  year = {2021},
  month = may,
  journal = {Quantitative and Computational Methods in Behavioral Sciences},
  pages = {1--27},
  issn = {2699-8432},
  urldate = {2023-09-11},
  abstract = {In this tutorial, we describe a workflow to ensure long-term reproducibility of R-based data analyses. The workflow leverages established tools and practices from software engineering. It combines the benefits of various open-source software tools including R Markdown, Git, Make, and Docker, whose interplay ensures seamless integration of version management, dynamic report generation conforming to various journal styles, and full cross-platform and long-term computational reproducibility. The workflow ensures meeting the primary goals that 1) the reporting of statistical results is consistent with the actual statistical results (dynamic report generation), 2) the analysis exactly reproduces at a later point in time even if the computing platform or software is changed (computational reproducibility), and 3) changes at any time (during development and post-publication) are tracked, tagged, and documented while earlier versions of both data and code remain accessible. While the research community increasingly recognizes dynamic document generation and version management as tools to ensure reproducibility, we demonstrate with practical examples that these alone are not sufficient to ensure long-term computational reproducibility. Combining containerization, dependence management, version management, and dynamic document generation, the proposed workflow increases scientific productivity by facilitating later reproducibility and reuse of code and data.},
  copyright = {Copyright (c) 2021 Aaron Peikert, Andreas M. Brandmaier},
  langid = {english},
  keywords = {containerization,dependency management,dynamic document generation,open science,R,reproducibility,version management}
}
